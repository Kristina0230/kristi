import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;

public class StudentFileReader {

    private static final String FILE_NAME = "students.txt";

    public static void main(String[] args) {
        try {
            BufferedReader reader = new BufferedReader(new FileReader(FILE_NAME));
            String line;
            Student[] students = new Student[50];
            int i = 0;
            while ((line = reader.readLine()) != null) {
                String[] fields = line.split(",");
                int id = Integer.parseInt(fields[0]);
                String firstName = fields[1];
                String lastName = fields[2];
                int age = Integer.parseInt(fields[3]);
                String course = fields[4];
                Student student = new Student(id, firstName, lastName, age, course);
                students[i++] = student;
            }
            reader.close();

            // Метод последовательного поиска
            int searchId = 25;
            long startTime = System.nanoTime();
            Student found = sequentialSearch(students, searchId);
            long endTime = System.nanoTime();
            System.out.println("Метод последовательного поиска: " + found + ", время выполнения: " + (endTime - startTime) + " нс");

            // Метод поиска в неотсортированных массивах древовидно структурированных
            startTime = System.nanoTime();
            StudentTree tree = new StudentTree(students);
            found = tree.search(searchId);
            endTime = System.nanoTime();
            System.out.println("Метод поиска в неотсортированных массивах древовидно структурированных: " + found + ", время выполнения: " + (endTime - startTime) + " нс");

            // Метод бинарного поиска
            startTime = System.nanoTime();
            Student[] sortedStudents = mergeSort(students);
            found = binarySearch(sortedStudents, searchId);
            endTime = System.nanoTime();
            System.out.println("Метод бинарного поиска: " + found + ", время выполнения: " + (endTime - startTime) + " нс");

            // Метод поиска интерполированием
            startTime = System.nanoTime();
            found = interpolationSearch(sortedStudents, searchId);
            endTime = System.nanoTime();
            System.out.println("Метод поиска интерполированием: " + found + ", время выполнения: " + (endTime - startTime) + " нс");

            // Метод Фибоначчи для поиска в отсортированном массиве
            startTime = System.nanoTime();
            found = fibonacciSearch(sortedStudents, searchId);
            endTime = System.nanoTime();
            System.out.println("Метод Фибоначчи для поиска в отсортированном массиве: " + found + ", время выполнения: " + (endTime - startTime) + " нс");

        } catch (IOException e) {
            System.out.println("Ошибка при чтении файла " + FILE_NAME);
            e.printStackTrace();
        }
    }

    private static Student sequentialSearch(Student[] students, int id) {
        for (Student student : students) {
            if (student.getId() == id) {
                return